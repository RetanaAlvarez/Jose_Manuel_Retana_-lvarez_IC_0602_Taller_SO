//todavia me falta terminarlo
#include <stdio.h>
#include <stdlib.h>

char* getPtrNom();
int getId();
int vacio();
int menu();
void borrar();
void sacar();
void poner();
void envoltura();

struct persona{
    int id;
    char*nombre;
    struct persona*siguiente;
};
typedef struct persona Nodo;

Nodo *final;
Nodo *inicio;

main() {
  final = inicio = 0;
  return menu();
}
int menu() {

    char a;
    do{

        printf("\n\tmenu");
        printf("\n1.-agregar");
        printf("\n2.-borrar");
        printf("\n3.-mostrar");
        printf("\n4.-salir\n");
        a=getchar();
        switch(a){
            case '1':
                poner();
                break;
            case'2':
                borrar();
                break;
            case'3':
                envoltura();
                break;
            default:
                return 0;
                break;
            }
            }while(a != '4' && a != EOF);

  return 1;
    }

void envoltura() {
void borrar();
  if (vacio()) {

    printf("no hay nada.\n");
  } else {
    printf("\n num %d", &getId);
    printf(" nombre %d", &getPtrNom);
  }

}
int getId() {
  int num;
  printf("Ingrese el ID: ");
  scanf("%d" , &num);
  return num;
}
char* getPtrNom() {
  char d,*newAr;

  int i = 0;

  newAr = (char*) malloc(sizeof(char)*100);

  printf("Ingrese el nombre del programa: ");

  while((d = getchar()) != EOF && d != '\n') {
    newAr[i++] = d;
  }

  return newAr;
}
    void sacar() {
        Nodo*actual,*temporal;
        borrar();

    if(vacio()){
        printf("tenemos algo en la cola");
    }else{
    if(final == inicio){
        printf("%d | %s\n", final->id, final->nombre);
        final =inicio=0;
    } else {
      actual = final;
      while (actual != inicio) {
        temporal = actual;
        actual = temporal->siguiente;
      }
      printf("%d | %s\n", inicio->id, inicio->nombre);
      inicio = temporal;
    }
  }
}
void poner() {
  Nodo *nodoNuevo,
       *temporal;

  nodoNuevo = (Nodo*) malloc(sizeof(Nodo));
  borrar();

  nodoNuevo->nombre = getPtrNom();
  nodoNuevo->id = getId();
  
  if (vacio()) {
    final = nodoNuevo;
    inicio = nodoNuevo;
  } else {
    temporal = final;
    final = nodoNuevo;
    final->siguiente = temporal;
  }
  borrar();
}

int vacio() {
  if (!final) {
    return 1;
  } else {
    return 0;
  }
}
void borrar() {
  while(getchar() != '\n')
    ;
}

